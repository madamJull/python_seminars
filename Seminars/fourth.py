# Задача №25. Напишите программу, которая принимает на вход строку, и отслеживает, сколько раз каждый символ
# уже встречался. Количество повторов добавляется к символам с помощью постфикса формата _n.
# Input: a a a b c a a d c d d
# Output: a a_1 a_2 b c a_3 a_4 d c_1 d_1 d_2

# string = 'a a a b c a a d c d d' # присваиваю данным тип строка
# print(string)
# my_list = string.split() # перевожу строку в список
# print(my_list)
# my_dict = {} # создаю словарь
# new_list = []
# for letter in my_list: # создаю цикл, который будет пробегаться по списку
#     my_dict[letter] = my_dict.get(letter, 0) + 1 # обращаюсь к словарю по ключу, словарь (если этот ключ есть) значение перезапишет или (если ключа нет) создаст новый ключ, элемент записывается в квадратных скобках
#     print(my_dict)
#     if my_dict.get(letter) > 1:
#         new_list.append(letter + '_' + str(my_dict.get(letter)))
#     else:
#         new_list.append(letter)
# print(' '.join(new_list))

# Задача №27. Решение в группах
# Пользователь вводит текст(строка). Словом считается последовательность непробельных символов идущих подряд,
# слова разделены одним или большим числом пробелов. Определите, сколько различных слов содержится в этом тексте.
# Input: She sells sea shells on the sea shore The shells that she sells are sea shells I'm sure.So if she sells sea
# shells on the sea shore I'm sure that the shells are sea
# shore shells
# Output: 13
# 1 вариант (наглядный)

# text = input('Введите текст: ') # записала текст
# print(text)
# text = text.split() # присвоила тексту тип списка
# print(text)
# text = set(text) # присвоила списку тип множества
# print(text)
# print(f'В тексте содержится {len(text)} различных слова')

# 2 вариант (оптимальный)

# text = set(input('Введите текст: ').split())
# print(f'В тексте содержится {len(text)} различных слова')

# 3 вариант (дополнительный)

# text = input('Введите текст: ')
# text = text.split()
# new_list = []
# for word in text:
#     if not word in new_list:
#         new_list.append(word)
# print(f'В тексте содержится {len(new_list)} различных слова')

# Дана последовательность чисел. Получить список уникальных элементов заданной последовательности.

# 1 вариант

# my_list = [1, 2, 3, 2, 6, 8, 5]
# print(my_list)
# new_list = []
# for item in array:
#     if my_list.count(item) == 1:
#         new_list.append(item)
# print(f'Уникальные элементы {new_list}')

# 2 вариант_List Comprehension

# my_list = [1, 2, 3, 2, 6, 8, 5]
# print(my_list)
# print([letter for letter in my_list if my_list.count(letter) == 1])

# Д/З

# Задача 22: Даны два неупорядоченных набора целых чисел (c повторениями). Выдать без повторений в порядке возрастания все те числа,
# которые встречаются в обоих наборах. Пользователь вводит 2 числа. n - кол-во элементов первого множества.
# m - кол-во элементов второго множества. Затем пользователь вводит сами элементы множеств.
# | 11 6
# 2 4 6 8 10 12 10 8 6 4 2
# 3 6 9 12 15 18
# 6 12 |

# n = int(input('n: '))
# m = int(input('m: '))
# list_1 = []
# for i in range(n):
#     elem = int(input())
#     list_1.append(elem)
# print(*list_1)
# list_2 = []
# for i in range(m):
#     item = int(input())
#     list_2.append(item)
# print(*list_2)
# list_1 = set(list_1)
# list_2 = set(list_2)
# array_1 = list_1.intersection(list_2)
# array_1 = list(array_1)
# array_1.sort()
# print(*array_1)

# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. Она растет на круглой грядке, причем кусты высажены только по окружности.
# Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растет N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число ягод – на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. Эта система состоит из управляющего модуля и нескольких
# собирающих модулей. Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, собирает ягоды с этого куста и с
# двух соседних с ним. Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход собирающий модуль,
# находясь перед некоторым кустом заданной во входном файле грядки. | 4 -> 1 2 3 4 9 |

n = int(input('n = '))
list_1 = [int(x) for x in input('-> ').split()]
list_1 = list_1 + list_1[:2]
max_num = 0
for i in range(n):
    max_num = max(max_num, list_1[i] + list_1[i - 1] + list_1[i + 1])
print(max_num)

